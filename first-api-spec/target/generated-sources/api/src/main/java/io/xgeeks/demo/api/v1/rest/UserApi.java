/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.xgeeks.demo.api.v1.rest;

import java.util.UUID;
import io.xgeeks.demo.api.v1.model.User;
import io.xgeeks.demo.api.v1.model.UserWithId;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Api(value = "User", description = "the User API")
public interface UserApi {

    /**
     * DELETE /v1/user/{id} : Delete user by id
     *
     * @param id Order ID (required)
     * @return successful operation (status code 204)
     *         or Invalid ID supplied (status code 400)
     *         or Not found (status code 404)
     */
    @ApiOperation(value = "Delete user by id", nickname = "deleteById", notes = "", tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "successful operation"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Not found") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/user/{id}"
    )
    ResponseEntity<Void> deleteById(@ApiParam(value = "Order ID", required = true) @PathVariable("id") UUID id);


    /**
     * GET /v1/user/{id} : Get all users
     *
     * @param id  (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Not found (status code 404)
     */
    @ApiOperation(value = "Get all users", nickname = "getById", notes = "", response = UserWithId.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = UserWithId.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Not found") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/user/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<UserWithId> getById(@ApiParam(value = "", required = true) @PathVariable("id") UUID id);


    /**
     * GET /v1/user : Get all users
     *
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Not found (status code 404)
     */
    @ApiOperation(value = "Get all users", nickname = "getUsers", notes = "", response = UserWithId.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = UserWithId.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Not found") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/user",
        produces = { "application/json" }
    )
    ResponseEntity<UserWithId> getUsers();


    /**
     * PATCH /v1/user/{id} : Update user information
     *
     * @param id  (required)
     * @param body  (required)
     * @return successful operation (status code 204)
     *         or Invalid ID supplied (status code 400)
     *         or Not found (status code 404)
     */
    @ApiOperation(value = "Update user information", nickname = "patchUser", notes = "", tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "successful operation"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Not found") })
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/user/{id}",
        consumes = { "application/json" }
    )
    ResponseEntity<Void> patchUser(@ApiParam(value = "", required = true) @PathVariable("id") UUID id,@ApiParam(value = "", required = true) @Valid @RequestBody User body);


    /**
     * POST /v1/user : Insert a new user
     *
     * @param body  (required)
     * @return Created (status code 201)
     *         or An error happen on validation (status code 400)
     *         or E- mail already exists (status code 409)
     */
    @ApiOperation(value = "Insert a new user", nickname = "postUser", notes = "", tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "An error happen on validation"),
        @ApiResponse(code = 409, message = "E- mail already exists") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/user",
        consumes = { "application/json" }
    )
    ResponseEntity<Void> postUser(@ApiParam(value = "", required = true) @Valid @RequestBody User body);


    /**
     * PATCH /v1/user/{id}/avatar : Upload user avatar
     *
     * @param id  (required)
     * @param receipt  (optional)
     * @return Avatar uploaded (status code 201)
     *         or Invalid ID supplied (status code 400)
     *         or Not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @ApiOperation(value = "Upload user avatar", nickname = "uploadAvatar", notes = "", tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Avatar uploaded"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/user/{id}/avatar",
        consumes = { "multipart/form-data" }
    )
    ResponseEntity<Void> uploadAvatar(@ApiParam(value = "", required = true) @PathVariable("id") UUID id,@ApiParam(value = "") @Valid @RequestPart(value = "receipt", required = false) MultipartFile receipt);

}
